<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FiFi</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .message-container {
            scroll-behavior: smooth;
        }
        .message {
            opacity: 0;
            animation: fadeIn 0.3s ease-in forwards;
            margin: 0rem 0;
            max-width: 80%;
        }
        .message.user {
            margin-left: auto;
            background-color: #1f1f1f;
            color: white;
            border-radius: 1rem 1rem 0 1rem;
            padding: 1rem;
        }
        .message.assistant {
            margin-right: auto;
            background-color: #2e2e2e;
            color: white;
            border-radius: 1rem 1rem 1rem 0;
            padding: 1rem;
        }
        .dark .message.assistant {
            background-color: #3a3a3a;
            color: white;
        }
        .prose {
            max-width: 100%;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="antialiased transition-colors duration-200 dark:bg-black bg-gray-100 flex flex-col items-center justify-center min-h-screen w-full px-4 sm:px-6 md:px-8">
    <div class="text-center text-3xl font-extrabold text-gray-900 dark:text-gray-200 mb-6 tracking-wide">
        üôãüèº‚Äç‚ôÄÔ∏è FiFi - Fynd Seller Support Assistant
    </div>

    <div class="w-full max-w-6xl bg-[#2f2f2f] shadow-lg rounded-xl p-6 flex flex-col gap-4 w-full sm:w-4/5 md:w-3/4 lg:w-2/3">
        <div id="messageContainer" class="message-container flex flex-col space-y-4 overflow-y-auto h-[500px] w-full">
        </div>

        <form id="chatForm" class="pt-4 w-full">
            <div class="flex items-center gap-4">
                <input 
                    type="text" 
                    name="message" 
                    placeholder="Type your message..." 
                    class="flex-1 rounded-lg border border-black px-4 py-2 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:bg-[#3f3f3f] dark:text-white transition-colors duration-200 bg-[#3f3f3f] text-white"
                    required
                >
                <button 
                    type="submit" 
                    class="bg-[#3f3f3f] hover:bg-gray-500 text-white px-6 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200"
                >
                    Send
                </button>
                <button 
                    type="button" 
                    onclick="toggleDarkMode()"
                    class="flex items-center justify-center bg-[#3f3f3f] hover:bg-gray-500 text-white px-4 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200"
                >
                    <svg id="theme-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path id="icon-path" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m8-8h1M3 12H2m15.364 6.364l.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707" />
                    </svg>
                </button>
            </div>
        </form>
    </div>

    <script src="https://unpkg.com/alpinejs" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.6/purify.min.js"></script>
    <script>
        // Function to get query params from URL
        function getQueryParam(param) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(param);
        }

        // Store company_id in localStorage if present in the URL
        const companyId = getQueryParam('company_id');
        if (companyId) {
            localStorage.setItem('company_id', companyId);
        }

        // Store conversation_id in localStorage if present in the URL
        const conversationId = getQueryParam('conversation_id');
        if (conversationId) {
            localStorage.setItem('conversation_id', conversationId);
        }

        document.getElementById('chatForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const form = e.target;
            const input = form.querySelector('input[name="message"]');
            const message = input.value.trim();
            input.value = '';

            if (!message) return;

            const container = document.getElementById('messageContainer');

            // Get conversation_id from localStorage
            const storedConversationId = localStorage.getItem('conversation_id') || '';
            console.log(storedConversationId);

            // Function to render messages safely
            function renderMessage(content, sender) {
                const sanitizedHTML = marked.parse(content); // Convert Markdown to safe HTML
                const messageHTML = `
                    <div class="message ${sender}">
                        <div class="prose dark:prose-invert">${sanitizedHTML}</div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', messageHTML);
                window.scrollTo(0, document.body.scrollHeight);
            }

            // Render user message
            renderMessage(message, 'user');

            // Fetch response from server
            const response = await fetch(`/chat?conversation_id=${storedConversationId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `message=${encodeURIComponent(message)}`
            });

            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let assistantMessage = '';

            while (true) {
                const { value, done } = await reader.read();
                if (done) {
                    // Render assistant's message at the end
                    renderMessage(assistantMessage, 'assistant');
                    break;
                }
                
                const text = decoder.decode(value);
                assistantMessage += text;
            }
        });
        function toggleDarkMode() {
            document.body.classList.toggle('dark');
        }
    </script>
</body>
</html>
